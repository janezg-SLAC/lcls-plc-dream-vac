<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="FB_VentMcCat" Id="{755fdd9e-2599-4b57-ba01-fef530ec2196}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_VentMcCat EXTENDS FB_Operation
VAR_INPUT
END_VAR
VAR_OUTPUT
END_VAR
VAR
    fRough2VFV2Position : REAL;
    fRough2VFV3Position : REAL;
END_VAR
VAR CONSTANT
    VFV_MAX_POSITION : INT := 100;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[SUPER^(iq_sMessageBuffer := iq_sMessageBuffer);

// Think which steps should not be permitted to cancel, figure out during testing
CASE eStep OF
E_OpStep.IDLE: // Do nothing

E_OpStep.START: // Close beamline window valves //Defer cancel if this procedure should not be cancelled from user!
    // Close window beamline valves
    GVL_PLC_Interface.bCLOSE_TMO_MR5K4_VWC := TRUE;
    GVL_PLC_Interface.bCLOSE_TMO_TM2K4_VWC := TRUE;
    M_SetMessage('Closing TMO window valves');
    M_RunTimeoutTimer(VALVE_TIMEOUT);

    IF (GVL_PLC_Interface.bTMO_MR5K4_VWC_CLOSED_LS AND GVL_PLC_Interface.bTMO_TM2K4_VWC_CLOSED_LS) THEN
        M_SetMessage('Window valves closed');
        M_ResetTimeoutTimer();
        eStep := E_OpStep.VMCAS_CLOSE_ISOLATION_VALVES;
    ELSIF M_TimeoutExpired() THEN
        M_SetMessage('Closing window valve - timeout');
        M_ResetTimeoutTimer();
        eStep := E_OpStep.VMCAS_CLOSE_ISOLATION_VALVES;
    END_IF

E_OpStep.VMCAS_CLOSE_ISOLATION_VALVES: // Close isolation valves (DP1:VRC:01, CAT1:VRC:01), Bypas valve DP1:VRC:01 shall open
    DREAM_DP1_VRC_01.M_Set_OPN_SW(FALSE);
    DREAM_CAT1_VRC_01.M_Set_OPN_SW(FALSE);
    M_SetMessage('Close Isolation valves');
    M_RunTimeoutTimer(VALVE_TIMEOUT);

    IF DREAM_DP1_VRC_01.iq_stValve.i_xClsLS AND DREAM_CAT1_VRC_01.iq_stValve.i_xClsLS AND DREAM_DP1_VRC_02.iq_stValve.i_xOpnLS THEN
        M_SetMessage('Isolation valves closed, bypass open');
        M_ResetTimeoutTimer();
        eStep := E_OpStep.VMCAS_STOP_TURBO_PUMPS;
    ELSIF M_TimeoutExpired() THEN
        M_FatalError('Moving isolation,bypass valves-timeout'); // Raise the error, don't move forward with stopping pumps etc.
    END_IF

E_OpStep.VMCAS_STOP_TURBO_PUMPS: // Stop MC and CAT Turbo pumps
    DREAM_DP1_PTM_01.M_Run(FALSE);
    DREAM_DP2_PTM_01.M_Run(FALSE);
    DREAM_DP3_PTM_01.M_Run(FALSE);
    DREAM_MC_PTM_01.M_Run(FALSE);
    DREAM_MC_PTM_02.M_Run(FALSE);
    DREAM_CAT1_PTM_01.M_Run(FALSE);
    DREAM_CAT2_PTM_01.M_Run(FALSE);
    DREAM_ROUGH2_PTM_01.M_Run(FALSE);
    DREAM_ROUGH2_PTM_02.M_Run(FALSE);

    M_SetMessage('Stopping MC and CAT turbos');
    eStep := E_OpStep.VMCAS_CLOSE_ROUGH_VALVES;

E_OpStep.VMCAS_CLOSE_ROUGH_VALVES: // Close roughing valves
    DREAM_ROUGH2_VRC_01.M_Set_OPN_SW(FALSE);
    DREAM_ROUGH2_VRC_02.M_Set_OPN_SW(FALSE);
    M_SetMessage('Close Roughing valves');
    M_RunTimeoutTimer(VALVE_TIMEOUT);

    IF DREAM_ROUGH2_VRC_01.iq_stValve.i_xClsLS AND DREAM_ROUGH2_VRC_02.iq_stValve.i_xClsLS THEN
        M_SetMessage('Roughing valves closed');
        M_ResetTimeoutTimer();
        eStep := E_OpStep.VMCAS_STOP_GAUGES;
    ELSIF M_TimeoutExpired() THEN
        M_FatalError('Moving roughing valves-timeout'); // Raise the error, don't move forward with stopping gauges etc.
    END_IF

E_OpStep.VMCAS_STOP_GAUGES: // Turn off gauges // I'm thinking to move this state to before closing rough valves becasue in previos state if error is raised gauges will remain ON while pumps already stopped
    DREAM_DP1_GHC_01.M_HVE(FALSE);
    DREAM_DP2_GHC_01.M_HVE(FALSE);
    DREAM_DP3_GHC_01.M_HVE(FALSE);
    DREAM_MC_GHC.M_HVECh1(FALSE);
    DREAM_MC_GHC.M_HVECh2(FALSE);
    DREAM_CAT1_GHC_01.M_HVE(FALSE);
    DREAM_CAT2_GHC_01.M_HVE(FALSE);

    M_SetMessage('Turning OFF MC and CAT Gauges');
    eStep := E_OpStep.VMCAS_WAIT_FOR_TURBO_PUMPS_SPIN_DOWN;

E_OpStep.VMCAS_WAIT_FOR_TURBO_PUMPS_SPIN_DOWN: // Turbos need to spin down to below 100 Hz before start venting procedure
    M_RunTimeoutTimer(TURBOS_SPINDOWN_TIMEOUT); // Timeout is 60 min for now. With testing verify that 30 min is long enough to spin down or increase if needed.
    M_SetMessage('Waiting for pumps to spindown');

    //How should we verify if serial communication work?
    IF DREAM_DP1_PTM_01.iq_stPTM.i_diCurSpd < 100 AND NOT fbSerialLineControl_DREAM_DP1_PTM_01.Error
        AND DREAM_DP2_PTM_01.iq_stPTM.i_diCurSpd < 100 AND NOT fbSerialLineControl_DREAM_DP2_PTM_01.Error
        AND DREAM_DP3_PTM_01.iq_stPTM.i_diCurSpd < 100 AND NOT fbSerialLineControl_DREAM_DP3_PTM_01.Error
        AND DREAM_MC_PTM_01.iq_stPTM.i_diCurSpd < 100 AND NOT fbSerialLineControl_DREAM_MC_PTM_01.Error
        AND DREAM_MC_PTM_02.iq_stPTM.i_diCurSpd < 100 AND NOT fbSerialLineControl_DREAM_MC_PTM_02.Error
        AND DREAM_CAT1_PTM_01.iq_stPTM.i_diCurSpd < 100 AND NOT fbSerialLineControl_DREAM_CAT1_PTM_01.Error
        AND DREAM_CAT2_PTM_01.iq_stPTM.i_diCurSpd < 100 AND NOT fbSerialLineControl_DREAM_CAT2_PTM_01.Error
        AND DREAM_ROUGH2_PTM_01.iq_stPTM.i_diCurSpd < 100 AND NOT fbSerialLineControl_DREAM_ROUGH2_PTM_01.Error
        AND DREAM_ROUGH2_PTM_02.iq_stPTM.i_diCurSpd < 100 AND NOT fbSerialLineControl_DREAM_ROUGH2_PTM_02.Error
    THEN
        M_SetMessage('Pumps below 100 Hz, start venting');
        M_ResetTimeoutTimer();
        eStep := E_OpStep.VMCAS_VENTING;
    ELSIF M_TimeoutExpired()
        AND NOT DREAM_DP1_PTM_01.iq_stPTM.i_xAtSpd
        AND NOT DREAM_DP2_PTM_01.iq_stPTM.i_xAtSpd
        AND NOT DREAM_DP3_PTM_01.iq_stPTM.i_xAtSpd
        AND NOT DREAM_MC_PTM_01.iq_stPTM.i_xAtSpd
        AND NOT DREAM_MC_PTM_02.iq_stPTM.i_xAtSpd
        AND NOT DREAM_CAT1_PTM_01.iq_stPTM.i_xAtSpd
        AND NOT DREAM_CAT2_PTM_01.iq_stPTM.i_xAtSpd
        AND NOT DREAM_ROUGH2_PTM_01.iq_stPTM.i_xAtSpd
        AND NOT DREAM_ROUGH2_PTM_02.iq_stPTM.i_xAtSpd
    THEN (*if serial communication doesn't work and not at speed*)
        M_SetMessage('Pumps spindown-timeout, start venting');
        M_ResetTimeoutTimer();
        eStep := E_OpStep.VMCAS_VENTING;
    ELSE
        M_FatalError('Turbo pumps failed to spin down'); //should I add that state machine goes to error if the pumps didn't start spinning down?
    END_IF

    // Reset vent valve postions
    fRough2VFV2Position := GVL_Constants.ROUGH2_VFV_02_INITIAL_POSITION;
    fRough2VFV3Position := GVL_Constants.ROUGH2_VFV_03_INITIAL_POSITION;

E_OpStep.VMCAS_VENTING: // Venting, increase opening by X% every 2 miniutes, until at atmosphere
    DREAM_ROUGH2_VFV_02.M_SetControlMode(E_VCN.ManualControl); // set manual mode for VFV valve
    DREAM_ROUGH2_VFV_03.M_SetControlMode(E_VCN.ManualControl); // set manual mode for VFV valve
    // Verify ATM_PRESS_ERR_RNG value with testing
    IF NOT (ABS(ATM_PRESS - DREAM_DP1_GPI_01.PG.rPRESS) <= ATM_PRESS_ERR_RNG)
        AND NOT (ABS(ATM_PRESS - DREAM_MC_GPI_01.PG.rPRESS) <= ATM_PRESS_ERR_RNG)
        AND NOT (ABS(ATM_PRESS - DREAM_ROUGH2_GPI_02.PG.rPRESS) <= ATM_PRESS_ERR_RNG)
        AND NOT (ABS(ATM_PRESS - DREAM_ROUGH2_GPI_03.PG.rPRESS) <= ATM_PRESS_ERR_RNG)
    THEN
        M_RunTimeoutTimer(VENTING_CYCLE);
        M_SetMessage('Venting Started');
        // Add check if serial communication is ok. If not ok we should only stick to change open position by 1% until venting completed?
        // I think we should add range here for the speed 1-5 Hz? I think sometimes speed doesn't go all the way to 0 Hz, verify with testing
        IF M_TimeoutExpired() THEN
            M_ResetTimeoutTimer(); // Reset timer for next 2 min venting cycle
            IF (NOT (DREAM_DP1_PTM_01.iq_stPTM.i_diCurSpd < 1) OR fbSerialLineControl_DREAM_DP1_PTM_01.Error)
                AND (NOT (DREAM_DP2_PTM_01.iq_stPTM.i_diCurSpd < 1) OR fbSerialLineControl_DREAM_DP2_PTM_01.Error)
                AND (NOT (DREAM_DP3_PTM_01.iq_stPTM.i_diCurSpd < 1) OR fbSerialLineControl_DREAM_DP3_PTM_01.Error)
                AND (NOT (DREAM_MC_PTM_01.iq_stPTM.i_diCurSpd < 1) OR fbSerialLineControl_DREAM_MC_PTM_01.Error)
                AND (NOT (DREAM_MC_PTM_02.iq_stPTM.i_diCurSpd < 1) OR fbSerialLineControl_DREAM_MC_PTM_01.Error)
                AND (NOT (DREAM_CAT1_PTM_01.iq_stPTM.i_diCurSpd < 1) OR fbSerialLineControl_DREAM_CAT1_PTM_01.Error)
                AND (NOT (DREAM_CAT2_PTM_01.iq_stPTM.i_diCurSpd < 1) OR fbSerialLineControl_DREAM_CAT2_PTM_01.Error)
                AND (NOT (DREAM_ROUGH2_PTM_01.iq_stPTM.i_diCurSpd < 1) OR fbSerialLineControl_DREAM_ROUGH2_PTM_01.Error)
                AND (NOT (DREAM_ROUGH2_PTM_02.iq_stPTM.i_diCurSpd < 1) OR fbSerialLineControl_DREAM_ROUGH2_PTM_02.Error)
            THEN
                IF fRough2VFV2Position < VFV_MAX_POSITION THEN
                    fRough2VFV2Position := fRough2VFV2Position + VFV_POSITION_STEP; // every 2 min increase open positon for 1% while pumps above 1 HZ
                ELSE
                    fRough2VFV2Position := VFV_MAX_POSITION;
                END_IF

                IF fRough2VFV3Position < VFV_MAX_POSITION THEN
                    fRough2VFV3Position := fRough2VFV3Position + VFV_POSITION_STEP; // every 2 min increase open positon for 1% while pumps above 1 HZ
                ELSE
                    fRough2VFV3Position := VFV_MAX_POSITION;
                END_IF
            ELSE
                fRough2VFV2Position := VFV_MAX_POSITION; // open venting valve to max postion when pump speed reached below 1Hz
                fRough2VFV3Position := VFV_MAX_POSITION; // open venting valve to max postion when pump speed reached below 1Hz
            END_IF
        END_IF
    ELSE
        M_SetMessage('Venting completed');
        M_ResetTimeoutTimer();
        eStep := E_OpStep.VMCAS_FINISH;
    END_IF

    DREAM_ROUGH2_VFV_02.M_SetReqPosition(fRough2VFV2Position); // set venting valve position
    DREAM_ROUGH2_VFV_03.M_SetReqPosition(fRough2VFV3Position); // set venting valve position

E_OpStep.VMCAS_FINISH: // Finish procedure, close venting valves, reset set points for all valves, pumps etc.
    DREAM_ROUGH2_VFV_02.M_SetControlMode(E_VCN.CloseValve);
    DREAM_ROUGH2_VFV_03.M_SetControlMode(E_VCN.CloseValve);
    // Reset vent valve postions
    fRough2VFV2Position := 0;
    fRough2VFV3Position := 0;

    // Set the at vacuum interlocks so user can't just start opening the valves
    DREAM_ROUGH2_VRC_01.M_SetAtVacSP(VALVE_INTERLOCK_SP);
    DREAM_ROUGH2_VRC_02.M_SetAtVacSP(VALVE_INTERLOCK_SP);

    // Set the at vacuum interlocks so user can't just start turning on pumps
    DREAM_DP1_PTM_01.M_SetBackingSP(PTM_INTERLOCK_SP);
    DREAM_DP2_PTM_01.M_SetBackingSP(PTM_INTERLOCK_SP);
    DREAM_DP3_PTM_01.M_SetBackingSP(PTM_INTERLOCK_SP);
    DREAM_MC_PTM_01.M_SetBackingSP(PTM_INTERLOCK_SP);
    DREAM_MC_PTM_02.M_SetBackingSP(PTM_INTERLOCK_SP);
    DREAM_CAT1_PTM_01.M_SetBackingSP(PTM_INTERLOCK_SP);
    DREAM_CAT2_PTM_01.M_SetBackingSP(PTM_INTERLOCK_SP);
    DREAM_ROUGH2_PTM_01.M_SetBackingSP(PTM_INTERLOCK_SP);
    DREAM_ROUGH2_PTM_02.M_SetBackingSP(PTM_INTERLOCK_SP);

    // Remove command to close beamline window valves
    GVL_PLC_Interface.bCLOSE_TMO_MR5K4_VWC := FALSE;
    GVL_PLC_Interface.bCLOSE_TMO_TM2K4_VWC := FALSE;

    M_Finish();

ELSE
    M_FatalError('Operation is in invalid state');
END_CASE]]></ST>
    </Implementation>
  </POU>
</TcPlcObject>